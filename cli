#!node

const yargs = require('yargs');

const { commands, mongoExecute } = require('./commands');

function command(fn, ...args) {
  return mongoExecute((db) => fn.call(null, db, ...args));
}

// eslint-disable-next-line no-unused-expressions
yargs
  .command(
    'auction <status>',
    'Control the status of the auction.',
    (y) => y
      .positional('status', {
        choices: ['preview', 'started', 'live', 'ended'],
        description: 'The bidding and live status of the auction.',
      }),
    (argv) => command(commands.auction, argv.status),
  )

  .command(
    'order <itemIds...>',
    'Set the order of items for the live auction.',
    (y) => y
      .positional('itemIds', {
        describe: 'The IDs (in order) of the items to auction.',
      }),
    (argv) => command(commands.order, argv.itemIds),
  )

  .command(
    'active <itemId>|none|next',
    'Set an item as the current active item.',
    (y) => y
      .positional('<itemId>|none|next', {
        describe: 'The item to set as active, "next" to use the next item set by the order command, or "none" to clear the active item.',
        type: 'string',
      }),
    (argv) => {
      if (argv.itemId === 'next') {
        return command(commands.next);
      }
      return command(commands.active, argv.itemId.toString());
    },
  )

  .command(
    'bidding <itemId>|active closed|open',
    'Sets bidding ability for an item.',
    (y) => y
      .positional('closed|open', {
        describe: 'Whether to set bidding as closed or open for the item.',
      })
      .positional('<itemId>|active|all', {
        describe: 'The item to set close-of-bidding, "all" to set for all items, or "active" to use the current active item.',
        type: 'string',
      }),
    (argv) => command(commands.bidding, argv.itemId.toString(), argv.closed === 'closed'),
  )

  .command(
    'refresh-content',
    'Downloads updated content from Contentful for auction.',
    (y) => y
      .option('verbose', {
        describe: 'Output the retrieved content JSON to the console.',
      }),
    commands.refreshContent,
  )

  .command(
    'reset-db',
    'Deletes all bids, bidders and auction status information from the database.  USE WITH CAUTION!',
    (y) => y
      .option('auctionId', {
        describe: 'Pass the auction ID to confirm you really want to do this.',
        required: true,
        type: 'string',
      }),
    (argv) => command(commands.resetDb, argv.auctionId),
  )

  .demandCommand()
  .strict()
  .help()
  .argv;
