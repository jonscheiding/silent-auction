#!node
require('@babel/register');

const yargs = require('yargs');

const { commands, mongoExecute } = require('./commands');

function command(fn, ...args) {
  return mongoExecute((db) => fn.call(null, db, ...args));
}

// eslint-disable-next-line no-unused-expressions
yargs
  .command(
    'auction',
    'Control the status of the auction.',
    (y) => y
      .command(
        'preview',
        'Sets the auction to preview mode, with no bidding allowed.',
        () => {},
        () => command(commands.auction, 'preview'),
      )
      .command(
        'started',
        'Sets the auction as started, with bidding open.',
        () => {},
        () => command(commands.auction, 'started'),
      )
      .command(
        'live',
        'Sets the auction as live, with bidding open and a banner indicating the live event is in progress.',
        (yy) => yy
          .option('url', {
            description: 'The URL to present in the banner (overrides the value from Contentful).',
          }),
        (argv) => command(commands.auction, 'live', argv),
      )
      .command(
        'ended',
        'Sets the auction to ended mode, with all bidding closed.',
        () => {},
        () => command(commands.auction, 'ended'),
      )
      .demandCommand(),
  )

  .command(
    'order <reference>',
    'Set the order of items for the live auction.',
    (y) => y
      .positional('reference', {
        describe: 'The Contentful ID of the Auction Order entry defining the ordering.',
        required: false,
      }),
    (argv) => command(commands.order, argv.reference),
  )

  .command(
    'orders',
    'Displays the available item orderings.',
    () => {},
    () => command(commands.order, null),
  )

  .command(
    'items',
    'Dumps metadata about all items in CSV format.',
    () => {},
    () => command(commands.listItems),
  )

  .command(
    'active <itemId>|none|next',
    'Set an item as the current active item.',
    (y) => y
      .positional('<itemId>|none|next', {
        describe: 'The item to set as active, "next" to use the next item set by the order command, or "none" to clear the active item.',
        type: 'string',
      }),
    (argv) => {
      if (argv.itemId === 'next') {
        return command(commands.next);
      }
      return command(commands.active, argv.itemId.toString());
    },
  )

  .command(
    'bidding <itemId>|active closed|open',
    'Sets bidding ability for an item.',
    (y) => y
      .positional('closed|open', {
        describe: 'Whether to set bidding as closed or open for the item.',
      })
      .positional('<itemId>|active|all', {
        describe: 'The item to set close-of-bidding, "all" to set for all items, or "active" to use the current active item.',
        type: 'string',
      }),
    (argv) => command(commands.bidding, argv.itemId.toString(), argv.closed === 'closed'),
  )

  .command(
    'refresh-content',
    'Downloads updated content from Contentful for auction.',
    (y) => y
      .option('verbose', {
        describe: 'Output the retrieved content JSON to the console.',
      }),
    commands.refreshContent,
  )

  .command(
    'reset-db',
    'Deletes all bids, bidders and auction status information from the database.  USE WITH CAUTION!',
    (y) => y
      .option('auctionId', {
        describe: 'Pass the auction ID to confirm you really want to do this.',
        type: 'string',
      }),
    (argv) => command(commands.resetDb, argv.auctionId),
  )

  .command(
    'report <report>',
    `Shows reports of bidder and item statuses.
    items   - Lists the active items in CSV format.
    bidders - Lists the e-mail addresses of all currently-winning bidders.
    auction - Shows status for all items and bidders.`,
    (y) => y
      .positional('report', {
        describe: 'Which report to run.',
        choices: ['items', 'bidders', 'auction'],
      }),
    (argv) => command(commands.report[argv.report]),
  )

  .demandCommand()
  .strict()
  .help()
  .argv;
